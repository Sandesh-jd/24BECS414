struct ListNode* reverseList(struct ListNode* head) {
    struct ListNode* prev = NULL;
    struct ListNode* curr = head;
    struct ListNode* next = NULL;
    
    while (curr != NULL) {
        next = curr->next;  // Save the next node
        curr->next = prev;  // Reverse the current node's link
        prev = curr;        // Move prev and curr one step forward
        curr = next;
    }
    return prev;
}

// Function to check if the linked list is a palindrome
bool isPalindrome(struct ListNode* head) {
    if (head == NULL || head->next == NULL) {
        return true;  // Empty or single-element list is trivially a palindrome
    }

    // Step 1: Find the middle of the list using slow and fast pointers
    struct ListNode *slow = head, *fast = head;
    
    // Move fast pointer twice as fast as slow
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    // Step 2: Reverse the second half of the list
    struct ListNode* secondHalf = reverseList(slow);
    struct ListNode* firstHalf = head;
    
    // Step 3: Compare both halves
    while (secondHalf != NULL) {
        if (firstHalf->val != secondHalf->val) {
            return false;  // If any mismatch is found, return false
        }
        firstHalf = firstHalf->next;
        secondHalf = secondHalf->next;
    }
    
    return true;  // All elements matched, the list is a palindrome
}

